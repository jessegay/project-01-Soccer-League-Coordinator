{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww25060\viewh27080\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \expnd0\expndtw0\kerning0
** Part 1: ** We have provided information for the 18 players in the Player Info spreadsheet. Please choose an appropriate data type to store the information for each player. In addition, create an empty collection constant to hold all the players\'92 data. Once you have decided on what tools to use, manually enter the player data so it can be used in Part 2.\
\
let playerName Dictionary = \
\
let allPlayers Array? = [playerName1, playerName2\'85]\
\
Maybe sort into exp and non exp arrays?   \
\
array.append to each team until number of experienced players = teamName.count/3\
\
then do the same for beginners. But what happens if there\'92s not an even number of each type?\
\
Or assign them to each team sequentially (like dealing cards) until players of each type are gone.\
\
for player in allPlayers \{\
	\
\
\
\
\
let teamSharks Array = []\
let teamDragons Array = []\
let teamRaptors Array = []\
\
\
** Part 2: ** Create logic to iterate through all 18 players and assign them to teams such that the number of experienced players on each team are the same. Store each team\'92s players in its own collection for use in Part 3. Please note: your logic should work correctly regardless of the initial ordering of the players and the number of players. This solution should work if there are 18 players or 100.\
\
Also, if you would like to attain an \'93exceeds expectations\'94 rating for this project, write code to ensure that each team's average height is within 1.5 inches of the others.\
\
** Part 3: ** Write code that iterates through all three teams of players and generates a personalized letter to the guardians, letting them know which team the child has been placed on and when they should attend their first team team practice. As long as you provide the necessary information (player name, team name, guardian names, practice date/time), feel free to have fun with the content of the letter. The team practice dates/times are as follows:\
\
Dragons - March 17, 1pm\
Sharks - March 17, 3pm\
Raptors - March 18, 1pm\
When your complete code is run in a playground the letters should be stored in a collection named 'letters'. When the code is run, the letters should be visible in the console.\
\
You can reference the resources provided in the Project Resources area for additional information on how to implement and use the Swift Collections.\
\
As always, meaningful and concise code comments are expected. Your code should be written and refined in an Xcode playground. Be sure to upload it to GitHub, as per the instructions provided in the Soccer Coordinator Video Instruction (see the link below).\
\
One note regarding the usage of GitHub. Since it is a version control tool, and it is best to do an incremental check in when you completed a feature, fix, or enhancement. Also when adding comment to each check-in, a good practice is to add comments for the specific things that's changed, e.g. "added logic for height based assignment", "fixed duplicate printing of dragon team". This way you can go back and know exactly where certain enhancements/bugs might be introduced.\
\
Please also note the specific naming requirements for variables in the detailed instructions below as these are required for your project to pass. Good luck, and happy coding!}